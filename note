I need help fixing my backend logic now: 

First, I love to add validation endpoint to validate when users adds a NGO, it doesn't appear on the GET Ngos endpoint yet, until it has been approved by the admin: 

see the admin.controller.js:
const User = require('../models/user.model');
const { ErrorHandler } = require('../utils/errorHandler');

exports.getAllUsers = async (req, res, next) => {
  try {
    console.log(`Admin access granted to: ${req.user.email}`);
    
    const users = await User.getAll();
    
    res.status(200).json({
      success: true,
      count: users.length,
      data: users
    });
  } catch (error) {
    next(error);
  }
};

exports.promoteToAdmin = async (req, res, next) => {
  try {
    const user = await User.findById(req.params.id);
    if (!user) {
      throw new ErrorHandler(404, 'User not found');
    }

    const updatedUser = await User.updateRole(req.params.id, 'admin');
    
    res.status(200).json({
      success: true,
      data: updatedUser
    });
  } catch (error) {
    next(error);
  }
};


see the ngo.controller.js: 

const User = require('../models/user.model');
const { ErrorHandler } = require('../utils/errorHandler');

exports.getAllUsers = async (req, res, next) => {
  try {
    console.log(`Admin access granted to: ${req.user.email}`);
    
    const users = await User.getAll();
    
    res.status(200).json({
      success: true,
      count: users.length,
      data: users
    });
  } catch (error) {
    next(error);
  }
};

exports.promoteToAdmin = async (req, res, next) => {
  try {
    const user = await User.findById(req.params.id);
    if (!user) {
      throw new ErrorHandler(404, 'User not found');
    }

    const updatedUser = await User.updateRole(req.params.id, 'admin');
    
    res.status(200).json({
      success: true,
      data: updatedUser
    });
  } catch (error) {
    next(error);
  }
};


Also, now we will need to create a new controller for scholarships, where ngos can list their scholarships or rather add scholarships, then we can also update the scholarship, or delete as well. Then also an endpoint to Get all the scholarships.

Also, add for the admin, the ability to update a user or delete a user from the system. Also, give the admin an endpoint where they can be adding a banner image and it will be gotten to be displayed to users in front.

see the admin.route.js: 

const express = require('express');
const router = express.Router();
const adminController = require('../controllers/admin.controller');
const { authenticate, isAdmin } = require('../middlewares/auth.middleware');

// Admin-only routes
router.get('/users', authenticate, isAdmin, adminController.getAllUsers);
router.patch('/users/:id/promote', authenticate, isAdmin, adminController.promoteToAdmin);

module.exports = router;


see the ngo.routes.js: 

const express = require('express');
const router = express.Router();
const ngoController = require('../controllers/ngo.controller');
const { authenticate } = require('../middlewares/auth.middleware');

router.post('', authenticate, ngoController.createNGO); 
router.get('', ngoController.getAllNGOs);
router.get('/:id', ngoController.getNGOById);
router.put('/:id', authenticate, ngoController.updateNGO);
router.delete('/:id', authenticate, ngoController.deleteNGO);
router.patch('/:id/verify', authenticate, ngoController.verifyNGO);

module.exports = router;


I don't have routes for scholarships yet,

Also, here is the server.js: 

require('dotenv').config();
const express = require('express');
const cors = require('cors');
const authRoutes = require('./src/routes/auth.routes');
const ngoRoutes = require('./src/routes/ngo.routes');
const adminRoutes = require('./src/routes/admin.routes');
const { handleError } = require('./src/utils/errorHandler');

const app = express();

// Request logging middleware
app.use((req, res, next) => {
  console.log(`${req.method} ${req.path}`);
  console.log('Headers:', req.headers);
  next();
});

// CORS configuration
const corsOptions = {
  origin: [
    'http://localhost:5000',
    'http://localhost:3000',
    'https://bigrelief.vercel.app',
    'http://bigrelief.com.ng',
    'https://big-relief-backend.vercel.app'
  ],
  optionsSuccessStatus: 200
};

// Middleware
app.use(cors(corsOptions));
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Welcome endpoint
app.get('/', (req, res) => {
  res.json({
    message: 'Welcome to the NGO Listings API',
    endpoints: {
      auth: {
        register: 'POST /api/v1/auth/register',
        login: 'POST /api/v1/auth/login',
        getMe: 'GET /api/v1/auth/me'
      },
      ngos: {
        create: 'POST /api/v1/ngos',
        getAll: 'GET /api/v1/ngos',
        getOne: 'GET /api/v1/ngos/:id'
      },
      admin: {
        getAllUsers: 'GET /api/v1/admin/users'
      }
    }
  });
});

// Routes
app.use('/api/v1/auth', authRoutes);
app.use('/api/v1/ngos', ngoRoutes);
app.use('/api/v1/admin', adminRoutes);

// Global error handler
app.use((err, req, res, next) => {
  handleError(err, res);
});

// Start server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});



Use all these informations above and update my node js backend for me again. 

And guide me on how to test the endpoints on postman collection. Remove all comments on the codes. 

